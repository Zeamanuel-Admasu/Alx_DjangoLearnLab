"""
Django settings for django_blog project.
Generated by 'django-admin startproject' using Django 5.2.4.
"""

from pathlib import Path
import os

# Paths
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------------------------
# Security / Debug
# ------------------------------------------------------------------------------

# Use an env var in prod; fallback only for local dev
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "dev-only-secret-key-do-not-use-in-production",
)

DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() == "true"

# Comma-separated list in env, e.g. "127.0.0.1,localhost,alx-final-2mni.onrender.com"
ALLOWED_HOSTS = [h for h in os.getenv("ALLOWED_HOSTS", "").split(",") if h] or []

# Render / Cloud / Proxy-friendly CSRF (comma-separated origins, include scheme)
# Example: "https://alx-final-2mni.onrender.com,https://*.yourdomain.com"
CSRF_TRUSTED_ORIGINS = [o for o in os.getenv("CSRF_TRUSTED_ORIGINS", "").split(",") if o]

# ------------------------------------------------------------------------------
# Applications
# ------------------------------------------------------------------------------

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "blog",
    "taggit",
    # Add 'taggit' later when you reach the tagging task (after `pip install django-taggit`)
    # "taggit",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Optionally add WhiteNoise for static files in production:
    # "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "django_blog.urls"

# ------------------------------------------------------------------------------
# Templates
# ------------------------------------------------------------------------------

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # project-level templates dir (keep app templates too via APP_DIRS=True)
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_blog.wsgi.application"

# ------------------------------------------------------------------------------
# Database
# ------------------------------------------------------------------------------

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DB_NAME", BASE_DIR / "db.sqlite3"),
        # For Postgres (if you switch later), set:
        # "ENGINE": "django.db.backends.postgresql",
        # "NAME": os.getenv("POSTGRES_DB", ""),
        # "USER": os.getenv("POSTGRES_USER", ""),
        # "PASSWORD": os.getenv("POSTGRES_PASSWORD", ""),
        # "HOST": os.getenv("POSTGRES_HOST", "localhost"),
        # "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}

# ------------------------------------------------------------------------------
# Password validation
# ------------------------------------------------------------------------------

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------------------------
# I18N / TZ
# ------------------------------------------------------------------------------

LANGUAGE_CODE = "en-us"
TIME_ZONE = os.getenv("DJANGO_TIME_ZONE", "Africa/Addis_Ababa")
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------------------------
# Static / Media
# ------------------------------------------------------------------------------

STATIC_URL = "static/"

# Where collectstatic puts files (for production)
STATIC_ROOT = BASE_DIR / "staticfiles"

# Extra places for dev static (e.g., BASE_DIR/static)
STATICFILES_DIRS = [BASE_DIR / "static"]

# If you enable WhiteNoise above, also:
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Optional media (if you add profile pics later)
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# ------------------------------------------------------------------------------
# Auth redirects (used in your auth task)
# ------------------------------------------------------------------------------

LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# ------------------------------------------------------------------------------
# Default PK
# ------------------------------------------------------------------------------

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"